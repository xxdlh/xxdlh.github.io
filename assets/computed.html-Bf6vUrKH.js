import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as e,b as t,e as p}from"./app-CDG-wEGk.js";const o={},c=t("p",null,"1.选项式写法，2.函数式写法",-1),l=p(`<h3 id="选项式写法-get-函数支持传入对象-set-函数自定义操作" tabindex="-1"><a class="header-anchor" href="#选项式写法-get-函数支持传入对象-set-函数自定义操作"><span>选项式写法,get 函数支持传入对象，set 函数自定义操作</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> firstName <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;张&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> lastName <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;三&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> firstName<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">+</span> lastName<span class="token punctuation">.</span>value
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">set</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token punctuation">[</span>firstName<span class="token punctuation">.</span>value<span class="token punctuation">,</span> lastName<span class="token punctuation">.</span>value<span class="token punctuation">]</span> <span class="token operator">=</span> newValue<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">changeName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&#39;李-四&#39;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数式写法-只能支持一个-getter-函数-不允许修改值" tabindex="-1"><a class="header-anchor" href="#函数式写法-只能支持一个-getter-函数-不允许修改值"><span>函数式写法，只能支持一个 getter 函数，不允许修改值</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> firstName <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;张&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> lastName <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;三&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> firstName<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">+</span> lastName<span class="token punctuation">.</span>value<span class="token punctuation">)</span>

<span class="token comment">//不允许修改值，无法修改name</span>
<span class="token comment">// const changeName = () =&gt; {</span>
<span class="token comment">//   name.value = &#39;李-四&#39;</span>
<span class="token comment">// }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function i(r,u){return s(),a("div",null,[c,e(" more "),l])}const k=n(o,[["render",i],["__file","computed.html.vue"]]),v=JSON.parse('{"path":"/note/Vue/computed.html","title":"computed计算属性的两种写法","lang":"zh-CN","frontmatter":{"title":"computed计算属性的两种写法","date":"2024-03-13T00:00:00.000Z","tag":["Vue"],"category":["frontEnd"],"description":"1.选项式写法，2.函数式写法","head":[["meta",{"property":"og:url","content":"https://xxdlh.github.io/note/Vue/computed.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"computed计算属性的两种写法"}],["meta",{"property":"og:description","content":"1.选项式写法，2.函数式写法"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-18T03:09:53.000Z"}],["meta",{"property":"article:author","content":"星星的泪痕"}],["meta",{"property":"article:tag","content":"Vue"}],["meta",{"property":"article:published_time","content":"2024-03-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-18T03:09:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"computed计算属性的两种写法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-18T03:09:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"星星的泪痕\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":3,"title":"选项式写法,get 函数支持传入对象，set 函数自定义操作","slug":"选项式写法-get-函数支持传入对象-set-函数自定义操作","link":"#选项式写法-get-函数支持传入对象-set-函数自定义操作","children":[]},{"level":3,"title":"函数式写法，只能支持一个 getter 函数，不允许修改值","slug":"函数式写法-只能支持一个-getter-函数-不允许修改值","link":"#函数式写法-只能支持一个-getter-函数-不允许修改值","children":[]}],"git":{"createdTime":1718680193000,"updatedTime":1718680193000,"contributors":[{"name":"薛涛涛","email":"xxdlhxue@163.com","commits":1}]},"readingTime":{"minutes":0.45,"words":135},"filePathRelative":"note/Vue/computed.md","localizedDate":"2024年3月13日","excerpt":"<p>1.选项式写法，2.函数式写法</p>\\n","autoDesc":true}');export{k as comp,v as data};
